import { Handler } from '@netlify/functions'
import { validateGenAIResponse } from '../shared/errorUtils'
import { ERROR_LABEL, Language, NounsReview } from '../shared/types'
// import { generatePromptSet } from '../shared/generatePromptSet'
import { generateExample } from '../shared/generateExample'
import { getPrompt } from '../shared/getPrompt'

const handler: Handler = async (event) => {
  const apiKey = process.env.OPENAI_API_KEY
  if (!apiKey) {
    return {
      statusCode: 500,
      body: 'Missing OpenAI API key in environment'
    }
  }

  try {
    const { nounsArray, language, dialogSignature } = JSON.parse(event.body ?? '{}')

    if (!nounsArray || !language || !dialogSignature) {
      // cXnsole.log('Missing the big three')
      // cXnsole.log(`language: ${language}`)
      // cXnsole.log(`nounsArray: ${JSON.stringify(nounsArray, null, 2)}`)
      // cXnsole.log(`dialogSignature: ${dialogSignature}`)

      return {
        statusCode: 400,
        body: 'Missing one or more required fields: language, nouns'
      }
    }

    // cXnsole.log(`language: ${language}`)
    // cXnsole.log(`nounsArray: ${JSON.stringify(nounsArray, null, 2)}`)
    // cXnsole.log(`dialogSignature: ${dialogSignature}`)

    const { prompt, fieldCount, errorLabel } = getPrompt({moduleName, lesson })

    const claudeKey = process.env.CLAUDE_API_KEY

    if (!claudeKey) {
      return {
        statusCode: 500,
        body: 'Missing Claude API key in environment'
      }
    }

    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'x-api-key': claudeKey,
        'anthropic-version': '2023-06-01',
        'content-type': 'application/json'
      },
      body: JSON.stringify({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 1024,
        messages: [{ role: 'user', content: prompt }]
      })
    })

    const data = await response.json()
    const reply = data.content?.[0]?.text?.trim() || ''

    // cXnsole.log("***********************************************")
    // cXnsole.log(prompt)
    // cXnsole.log("***********************************************")
    // cXnsole.log(JSON.stringify(reply, null, 2))
    // cXnsole.log("***********************************************")

    const nounsReviewResult = validateGenAIResponse<NounsReview>({
      response: reply,
      errorLabel: ERROR_LABEL.NOUNS_REVIEW_ERROR,
      expectedFieldCount: 4,
      language: '' as Language
    })    

    // In short, I am carrying along the signature
    // for the nouns, lining up this response
    // about nouns with the incoming nouns.
    const nounsReviewSignature = dialogSignature

    // cXnsole.log(JSON.stringify(nounsReviewResult, null, 2))

    return {
      statusCode: 200,
      body: JSON.stringify({ nounsReviewPrompt, nounsReviewResult, nounsReviewSignature })
    }
  } catch (err) {
    return {
      statusCode: 500,
      body: `Error generating nouns: ${(err as Error).message}`
    }
  }
}

export { handler }
